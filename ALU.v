// File: ALU.v
// Generated by MyHDL 0.11
// Date: Thu Nov 18 12:35:09 2021


`timescale 1ns/10ps

module ALU (
    ina,
    inb,
    out,
    brt,
    aluop
);


input signed [32:0] ina;
input signed [32:0] inb;
output signed [32:0] out;
reg signed [32:0] out;
input brt;
input [4:0] aluop;




always @(ina, aluop, inb) begin: ALU_ALU_RUN
    if ((aluop == 0)) begin
        out = (ina + inb);
    end
    else if ((aluop == 1)) begin
        out = (ina << $signed({1'b0, inb[5-1:0]}));
    end
    else if (((aluop == 2) || (aluop == 3))) begin
        out = (ina < inb);
    end
    else if ((aluop == 4)) begin
        out = (ina ^ inb);
    end
    else if ((aluop == 5)) begin
        out = $signed(ina >>> $signed({1'b0, inb[5-1:0]}));
    end
    else if ((aluop == 6)) begin
        out = (ina | inb);
    end
    else if ((aluop == 7)) begin
        out = (ina & inb);
    end
    else if ((aluop == 8)) begin
        out = (ina - inb);
    end
    else if ((aluop == 13)) begin
        out = $signed(ina >>> $signed({1'b0, inb[5-1:0]}));
    end
    else if ((aluop == 16)) begin
        out = (ina == inb);
    end
    else if ((aluop == 17)) begin
        out = (ina != inb);
    end
    else if (((aluop == 20) || (aluop == 22))) begin
        out = (ina < inb);
    end
    else if (((aluop == 21) || (aluop == 23))) begin
        out = (ina >= inb);
    end
end

endmodule
